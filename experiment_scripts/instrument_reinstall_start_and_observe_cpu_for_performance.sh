#!/bin/bash
# reuse the source code contained in the file instrument_without_odile_on_listen_mode_and_start_app.sh
# In this file we redo instrumentation. 
#
# the first argument is the apk path, 
#  the second "short or long " specify if it is the Odile short path or the long one, 
#  The third is the external storage global workspace (to store datas-eg all generated files)
# The fourth is the number of iterations during measurements
#
# usage : instrument_reinstall_start_and_observe_cpu_for_performance.sh apk_path number_of_methods
# example in our case: ./instrument_reinstall_start_and_observe_cpu_for_performance.sh 
#	/media/lavoisier/ee9567d1-e98a-411a-8cea-516195e51630/frida_evaluation_on_many_apps/apks/locker-fe666e209e094968d3178ecf0cf817164c26d5501ed3cd9a80da786a4a3f3dc4.apk long
#    /media/lavoisier/ee9567d1-e98a-411a-8cea-516195e51630/frida_evaluation_on_many_apps 52
# 		
#
#it will produce a folder named testing_[$2]_path in the folder
#  cpu_observations/app_file_name/
#  NB: supposing that the folder $3/cpu_observations/app_file_name_without_extension is present, 
#  it will create $3/cpu_observations/app_file_name_without_extenxion/testing_long_path if it not exist
#  																											and if the second argument was long (for long path)

#
MISC=x86
echo "-----> setting the global workspace " 

#The project folder
GLOBAL_WORKSPACE="/home/lavoisier/svn_workspace/wapet/security/fridaDroid_final_project"

#the jar file of louison giztinger instrumenter.
INSTRUMENTER_JAR_FILE=$GLOBAL_WORKSPACE/instrumenter_related_tools/groom/static/build/libs/killerdroid-static-3.0.jar 
#the instrumenter config files (the real file we will consider is main.json_template)
INSTRUMENTER_CONFIG_FILE=$GLOBAL_WORKSPACE/instrumenter_related_tools/groom/static/main.json



#The tracer js file (you can use the phone tracer or the emulator one) 
TRACER_JS=$GLOBAL_WORKSPACE/frida_related_tools/tracers/art-tracer-emulator/_agent.js


#The gadget so files folder  (I reused the same as with odile,
#if it does not work I will used the old one present on Louison Instrumenter folder) 
GADGET_SO_FILES=$GLOBAL_WORKSPACE/frida_related_tools/gadget_so_files

#All temporary files generated by this script
app_file_name_without_extension=$(basename -s .apk $1)
INSTRUMENTATION_TMP_FOLDER=$3/instrumentation_tmp_folder/${app_file_name_without_extension}

#cp -rfv $INSTRUMENTATION_TMP_FOLDER ~/.local/share/Trash/files   
rm -rfv $INSTRUMENTATION_TMP_FOLDER
mkdir $INSTRUMENTATION_TMP_FOLDER

number_of_iterations=$4
number_of_iterations=${number_of_iterations/.*}

long_or_short=$2
echo "----- ----- ----- >> Testing $long_or_short path"

echo "MISC = $MISC"

if [ -z "$1" ] 
   then
	echo "No apk path supplied as argument "; exit 1;
else
    echo "testing apk $1"     
	echo "Ensure you have already started the emulator!!!"
	#adb root
	
	
	echo "----- ----- ----- >>  Getting the name of the apk ";   
	pkg=$(aapt dump badging $1|awk -F" " '/package/ {print $2}'|awk -F"'" '/name=/ {print $2}')
	act=$(aapt dump badging $1|awk -F" " '/launchable-activity/ {print $2}'|awk -F"'" '/name=/ {print $2}')
	echo "package name : $pkg"
	echo "start activity name : $act"
    echo "uninstalling the app before doing first mesurements"
    adb uninstall $pkg
	app_file_name_without_extension=$(basename -s .apk $1)
	echo "----- file name _wthout_extension : $app_file_name_without_extension"



	#We need to replay instrumentation if we want to take into account the new modified tracer script

	
	
	echo "----->  Config files modification  1"; 	
	echo "----->  For the instrumenter (we configure the tmp folder where the output will be created)"
	
	
	(echo "$INSTRUMENTATION_TMP_FOLDER" | sed -r 's/\//\\\//g') > to_delete
	tmp_folder_prepared_for_sed=$(cat to_delete)
	rm to_delete

	sed "s/instrumented_folder/${tmp_folder_prepared_for_sed}\/instrumented_apks_of_$pkg/g" ${INSTRUMENTER_CONFIG_FILE}_template  > ${INSTRUMENTATION_TMP_FOLDER}/instrumenter_config_file.json_for_${pkg}
	
	sed "s/tmp_folder\/lib.zip/${tmp_folder_prepared_for_sed}\/lib.zip/g" ${INSTRUMENTER_CONFIG_FILE}_template  > ${INSTRUMENTATION_TMP_FOLDER}/instrumenter_config_file.json_for_${pkg}

	echo "----->  Config files modification  2 "; 
	echo "----->  For Frida gadget (Finally because the config file will be inside the App Folder, nothing is done there)"
	sed "s/package_name/$pkg/g" $GLOBAL_WORKSPACE/frida_related_tools/libgadget.config.so_template > $INSTRUMENTATION_TMP_FOLDER/libgadget.config.so_for_$pkg


	echo "----->  making the lib file : cleaning repositories "; 
	

	if [ "$MISC" == "x86" ]
	then
		echo "----->  Making the x86 lib folder"; 
				mkdir $INSTRUMENTATION_TMP_FOLDER/$MISC/

			#cp  -rfv  $INSTRUMENTATION_TMP_FOLDER/$MISC/* ~/.local/share/Trash/files 
			rm  -rfv  $INSTRUMENTATION_TMP_FOLDER/$MISC/*
			
		echo "inside the lib zip file, you have the frida gadget so file, the tracer js file and the config file"
		mv -v $INSTRUMENTATION_TMP_FOLDER/libgadget.config.so_for_$pkg $INSTRUMENTATION_TMP_FOLDER/$MISC/libgadget.config.so
		cp -v $GADGET_SO_FILES/gadget_${MISC}.so $INSTRUMENTATION_TMP_FOLDER/$MISC/libgadget.so
		cp -v $TRACER_JS  $INSTRUMENTATION_TMP_FOLDER/$MISC/libtracerjs.so
				#we use .so extension because in the system, only so files are accepted in the lib folder. 
		cd $INSTRUMENTATION_TMP_FOLDER
		zip lib.zip $MISC $MISC/*;
		cd $GLOBAL_WORKSPACE
				
	elif [ "$MISC" == "arm64" ]
	then
		echo "----->  Making the arm64 lib folder, it is arm64-v8a in reality"; 
		mkdir $INSTRUMENTATION_TMP_FOLDER/${MISC}-v8a/
		
			#cp  -rfv  $INSTRUMENTATION_TMP_FOLDER/${MISC}-v8a/* ~/.local/share/Trash/files 
			rm  -rfv  $INSTRUMENTATION_TMP_FOLDER/${MISC}-v8a/*
		
		echo "inside the lib zip file, you have the frida gadget so file, the tracer js file and the config file"
		mv -v $INSTRUMENTATION_TMP_FOLDER/libgadget.config.so_for_$pkg $INSTRUMENTATION_TMP_FOLDER/${MISC}-v8a/libgadget.config.so
		cp -v $GADGET_SO_FILES/gadget_${MISC}.so $INSTRUMENTATION_TMP_FOLDER/${MISC}-v8a/libgadget.so
			cp -v $TRACER_JS  $INSTRUMENTATION_TMP_FOLDER/${MISC}-v8a/libtracerjs.so
				#we use .so extension because in the system, only so files are accepted in the lib folder. 
		cd $INSTRUMENTATION_TMP_FOLDER
		zip lib.zip ${MISC}-v8a ${MISC}-v8a/*;
		cd $GLOBAL_WORKSPACE
	else
		echo "-----> ERROR : Misc not supported"; exit 1;
	fi 

	echo  "----->  Instrumentation      "; 
	#cp -rfv  temp-* ~/.local/share/Trash/files   
	rm -rfv  temp-*

	INSTRUMENTER_OUTPUT_FOLDER=$INSTRUMENTATION_TMP_FOLDER/instrumented_apks_of_$pkg
	#cp -rfv $INSTRUMENTATION_TMP_FOLDER/instrumented_apks_of_* ~/.local/share/Trash/files  
	rm -rfv $INSTRUMENTATION_TMP_FOLDER/instrumented_apks_of_*
	mkdir $INSTRUMENTER_OUTPUT_FOLDER
	
	echo "-----> the instrumented apks of this apk is in folder $INSTRUMENTER_OUTPUT_FOLDER ,"
	echo "-----> the config file is ${INSTRUMENTATION_TMP_FOLDER}/instrumenter_config_file.json_for_${pkg} "; 

	java -jar -Xss100M -XX:CICompilerCount=2 $INSTRUMENTER_JAR_FILE \
			-c ${INSTRUMENTATION_TMP_FOLDER}/instrumenter_config_file.json_for_${pkg}  \
				-a $1

	cp -rfv  temp-*/sootOutput/*soot-frida-aligned-signed.apk $INSTRUMENTER_OUTPUT_FOLDER
	echo "----->  running the apk (The emulator need to be started)"; 

	echo "----->  INSTRUMENTATION FINISHED !!! ";
	sleep 3 



	RESULT_FOLDER=$3/cpu_observations/${app_file_name_without_extension}/testing_${long_or_short}_path
    rm -rfv $RESULT_FOLDER
	mkdir -p $RESULT_FOLDER
	echo "----- ----- ----- >> First mesurements before installation"

	i="0"
	while [ $i -lt 5 ]
	do
	    output_file_path=$RESULT_FOLDER/${i}_before_starting_app_$(date)  
		output_file_path=${output_file_path//[ ,:+()]/_} #removing spaces, "," and ":"
		adb shell top -b -n 1 | grep $pkg > $output_file_path
		#adb shell "dumpsys meminfo ${pkg}" > $output_file_path
		i=$[$i+1]
		sleep 0.5
	done
   
    # WARNING: make sure this file is present

	adb uninstall $pkg
	repackagedApk="$(ls $INSTRUMENTER_OUTPUT_FOLDER)"
	adb logcat -c
	

	adb install $INSTRUMENTER_OUTPUT_FOLDER/$repackagedApk 
	
    adb shell am start -n $pkg/$act
	 

    echo "----- ----- ----- >>  APP STARTED: Second mesurement after installation "
    echo "----- ----- ----- >> NOTE: In this case we are just simulating the frida server waiting process"
	echo '----- ----- ----- >> Because in the Odile tracer script (index.ts), we added a delay of 6 seconds' 
	echo '----- ----- ----- >>    using setTimeout before executing registering callbacks '
	while [ $i -lt 10 ]
	do
	    output_file_path=$RESULT_FOLDER/${i}_after_starting_app_$(date)  
		output_file_path=${output_file_path//[ ,:+()]/_} #removing spaces, "," and ":"
		adb shell top -b -n 1 | grep $pkg > $output_file_path
		#adb shell "dumpsys -t 60 meminfo ${pkg}" > $output_file_path #adb shell dumpsys -t 60 meminfo
		i=$[$i+1]
		sleep 0.5
	done

   
	sleep 5
    echo " ----- ----- ----- >> SIMULATING REQUEST SENDING. Nothing to be done, the output,
			 where to look the trace is the logcat file"

	tracer_output_file_path=$RESULT_FOLDER/tracer_output_$(date)  
	tracer_output_file_path=${tracer_output_file_path//[ ,:+()]/_} #removing spaces, "," and ":"
	
	pid_file=$RESULT_FOLDER/tracer.pid
	(echo "o" > $tracer_output_file_path) &

   	pid=$(echo $!)
	pid=$[$pid+2]
	echo $pid > $pid_file
    echo " ----- ----- ----- >> tracer pid = $pid , ten seconds to verify , command (adb logcat > $tracer_output_file_path) & "
	#sleep 1

	echo "tracer output file = $tracer_output_file_path"

    #gedit $tracer_output_file_path  &
 
    echo "----- ----- ----- >> Third mesurements after sending js method codes "

   	old_file_size="0"
	while [ $i -lt $number_of_iterations ] #33 is for Jesus Christ !!! 
	do
	    output_file_path=$RESULT_FOLDER/${i}_after_sending_js_methods_code_$(date)  
		output_file_path=${output_file_path//[ ,:+()]/_} #removing spaces, "," and ":"
		current_copy=$RESULT_FOLDER/${i}_th_tracer_output_$(date)
		current_copy=${current_copy//[ ,:+()]/_}
		adb shell top -b -n 1 | grep $pkg > $output_file_path
		#adb shell "dumpsys -t 60 meminfo ${pkg}" > $output_file_path
		#looking if the tracer has finished it process by testing if the output_file_path size is constant
        new_file_size=$(stat -c%s "$tracer_output_file_path"); cp $tracer_output_file_path  $current_copy
        
		echo " --- --- >> we continue mesurements... new_file_size = $new_file_size ."
		old_file_size=$new_file_size
		i=$[$i+1]
		sleep 0.3
	done

   
	echo "----- ----- ----- >> killing the tracer.py process"
	
	
	kill -9 $(cat ${pid_file})


	new_file_size=$(stat -c%s "$tracer_output_file_path")
	echo " --- --- >> new_file_size when finishing process = $new_file_size ."
 fi 
 adb uninstall $pkg
 echo "----- ----- ----- >> Test realised on $(date)"; 





	#if act=""    
		#comp=$(adb shell cmd package resolve-activity --brief -c android.intent.category.LAUNCHER $pkg | tail -1);
        	#adb shell cmd activity start-activity $comp
        # or using monkey this is the last option. com.garbege.background.cutout
		#adb shell monkey -p com.garbege.background.cutout -c android.intent.category.LAUNCHER 1